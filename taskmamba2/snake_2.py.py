import pygame
import random
import sys

pygame.init()

# –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ –∫–ª–µ—Ç–∫–∏
WIDTH, HEIGHT = 600, 600
CELL_SIZE = 20
COLS = WIDTH // CELL_SIZE
ROWS = HEIGHT // CELL_SIZE

# –¶–≤–µ—Ç–∞
WHITE = (255, 255, 255)
GREEN = (0, 200, 0)
RED = (200, 0, 0)
BLACK = (0, 0, 0)
GRAY = (50, 50, 50)
YELLOW = (255, 255, 0)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∏ —à—Ä–∏—Ñ—Ç–∞
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake_Game")
clock = pygame.time.Clock()
font = pygame.font.SysFont("Arial", 24)

# –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–º–µ–π–∫–∏
snake = [(5, 5), (4, 5), (3, 5)]
direction = (1, 0)
score = 0
level = 1
speed = 10

# –°—Ç–µ–Ω—ã –ø–æ –∫—Ä–∞—è–º –ø–æ–ª—è
walls = []
for x in range(COLS):

    walls.append((x, 0))

    walls.append((x, ROWS - 1))

for y in range(ROWS):

    walls.append((0, y))

    walls.append((COLS - 1, y))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –µ–¥—ã
food = None  # –ø–æ–∑–∏—Ü–∏—è –µ–¥—ã
food_weight = 1  # –≤–µ—Å –µ–¥—ã
food_timer = 0   # —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ–¥—ã
FOOD_LIFESPAN = 300  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 10 fps)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–¥—ã
def get_food_position():

    while True:

        x = random.randint(1, COLS - 2)

        y = random.randint(1, ROWS - 2)

        if (x, y) not in snake and (x, y) not in walls:

            return (x, y)

# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
def draw_game(food_pos):

    screen.fill(BLACK)

    # –†–∏—Å—É–µ–º —Å—Ç–µ–Ω—ã
    for wall in walls:

        pygame.draw.rect(screen, GRAY, (wall[0]*CELL_SIZE, wall[1]*CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # –†–∏—Å—É–µ–º –∑–º–µ–π–∫—É
    for segment in snake:

        pygame.draw.rect(screen, GREEN, (segment[0]*CELL_SIZE, segment[1]*CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # –†–∏—Å—É–µ–º –µ–¥—É
    pygame.draw.rect(screen, RED, (food_pos[0]*CELL_SIZE, food_pos[1]*CELL_SIZE, CELL_SIZE, CELL_SIZE))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Å –µ–¥—ã —á–∏—Å–ª–æ–º
    weight_text = font.render(str(food_weight), True, YELLOW)
    screen.blit(weight_text, (food_pos[0]*CELL_SIZE + 5, food_pos[1]*CELL_SIZE + 2))

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—á—ë—Ç –∏ —É—Ä–æ–≤–µ–Ω—å
    score_text = font.render(f"Score: {score}", True, WHITE)
    level_text = font.render(f"Level: {level}", True, WHITE)
    screen.blit(score_text, (10, 10))
    screen.blit(level_text, (WIDTH - 120, 10))

    pygame.display.update()

# –≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
def show_game_over_screen():

    screen.fill(BLACK)

    game_over_text = font.render("üí• Game Over!", True, RED)
    score_text = font.render(f"Final Score: {score}", True, WHITE)
    level_text = font.render(f"Level Reached: {level}", True, WHITE)
    hint_text = font.render("Press ESC to quit...", True, GRAY)

    screen.blit(game_over_text, (WIDTH // 2 - 80, HEIGHT // 2 - 60))
    screen.blit(score_text, (WIDTH // 2 - 80, HEIGHT // 2 - 20))
    screen.blit(level_text, (WIDTH // 2 - 80, HEIGHT // 2 + 20))
    screen.blit(hint_text, (WIDTH // 2 - 100, HEIGHT // 2 + 60))

    pygame.display.update()

    waiting = True
    while waiting:

        for event in pygame.event.get():

            if event.type == pygame.QUIT:

                pygame.quit()

                sys.exit()

            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:

                waiting = False

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –µ–¥—É
food = get_food_position()
food_weight = random.randint(1, 3)  # –≤–µ—Å –µ–¥—ã –æ—Ç 1 –¥–æ 3
food_timer = FOOD_LIFESPAN  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

running = True
while running:

    clock.tick(speed)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã—Ö–æ–¥–∞
    for event in pygame.event.get():

        if event.type == pygame.QUIT:

            pygame.quit()

            sys.exit()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–º–µ–π–∫–∏
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP] and direction != (0, 1):

        direction = (0, -1)

    elif keys[pygame.K_DOWN] and direction != (0, -1):

        direction = (0, 1)

    elif keys[pygame.K_LEFT] and direction != (1, 0):

        direction = (-1, 0)

    elif keys[pygame.K_RIGHT] and direction != (-1, 0):

        direction = (1, 0)

    # –ù–æ–≤–∞—è –≥–æ–ª–æ–≤–∞ –∑–º–µ–π–∫–∏
    new_head = (snake[0][0] + direction[0], snake[0][1] + direction[1])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    if new_head in walls or new_head in snake:

        show_game_over_screen()

        pygame.quit()

        sys.exit()

    snake.insert(0, new_head)

    # –°—ä–µ–¥–∞–Ω–∏–µ –µ–¥—ã
    if new_head == food:

        score += food_weight  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –µ–¥—ã
        food = get_food_position()
        food_weight = random.randint(1, 3)  # –Ω–æ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –µ–¥—ã
        food_timer = FOOD_LIFESPAN  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

        # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –æ—á–∫–æ–≤
        if score // 5 + 1 > level:

            level += 1
            speed += 2
    else:

        snake.pop()  # –µ—Å–ª–∏ –µ–¥—É –Ω–µ —Å—ä–µ–ª–∏ ‚Äî —Ö–≤–æ—Å—Ç —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è

    # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–µ—Ä –∂–∏–∑–Ω–∏ –µ–¥—ã
    food_timer -= 1
    if food_timer <= 0:

        food = get_food_position()
        food_weight = random.randint(1, 3)
        food_timer = FOOD_LIFESPAN

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
    draw_game(food)